{"text": "hi in this tutorial we're going to learn how to create a custom part symbol from scratch so if you can't find the part you need in the community library then this will be how you can create your own that you can use and then share back to the community now just as a heads up a significant part of this is going to be using an svg drawing tool to create the image of the symbol if there's one you're familiar with feel free to use that i'm going to use a tool that we've used and like but whatever tool you use i'm going to show all the steps you need to take so that this symbol shows up properly in flux now if you're unfamiliar with creating svgs don't worry about it i'm not that familiar with it either so ", "metadata": {"start": 0, "video_id": "eXBq52rjoxA"}}
{"text": "hopefully these steps will be clear even if you've never played with svg files before so just to give an overview of the process first we're going to create a new part from the drop-down then we'll add pins we'll publish the part then we'll go to our svg editor to create the symbol we'll download it from there and upload the symbol to flux and then i'm going to show you how to visually map the pins to the symbol all right let's get going so for this tutorial we're going to create a generic six pin part two input pins two output pins vcc and ground right now we're not too worried about ", "metadata": {"start": 30.48, "video_id": "eXBq52rjoxA"}}
{"text": "the actual functionality we're just focused on the symbol so let's start by going to our drop down we're going to click new part template so it starts you off with a fairly simple voltage divider you can either delete the whole thing or you can edit it i'm going to delete the whole thing and start from scratch but first i just want to show you that you can rename the part up here i'm going to call it save and then on the right you can update the description ", "metadata": {"start": 62.0, "video_id": "eXBq52rjoxA"}}
{"text": "okay so i'm going to delete the whole thing and i'm just going to add six pins so you can either drag each one individually or you can copy and paste now i'm going to line them up you don't have to but okay so i'm going to label each one but do that you just click on the pen ", "metadata": {"start": 92.159, "video_id": "eXBq52rjoxA"}}
{"text": "you go to about and change the designator and do that for all of them okay so the next step we're going to do is we're going to go ahead and publish it and then we can actually see we can sort of see it already looks like it has this default three pin let's just bring up a new project i'm gonna look for it and you can see it's got these three ", "metadata": {"start": 123.28, "video_id": "eXBq52rjoxA"}}
{"text": "pins by default and all the pins are sort of scratched in the center so not terribly usable uh at the moment so one thing we can do is we can head back to our part go to assets click manage make sure we can actually remove this standard symbol and then when we go back to it we'll see that it's updated uh i would say the part is now it's usable but let's say you wanted to create you know this isn't exactly the symbol you want maybe you know in our case we're going to create ", "metadata": {"start": 153.84, "video_id": "eXBq52rjoxA"}}
{"text": "an example where vcs is on the top ground is on the bottom and you have inputs and outputs on two sides but maybe you want to create a custom shape you want a triangle for an op-amp or you want you know some other kind of custom shape so in order to do that uh let's head over to our svg editor so again feel free to use whichever one you're familiar with we use vector.com it's free to use it's free to sign up and free to use um there may be a paid component of it but i think for everything we need it's completely free so we're gonna go ahead and sign in okay we're gonna go to create new ", "metadata": {"start": 185.04, "video_id": "eXBq52rjoxA"}}
{"text": "okay so what we're gonna do is we're gonna draw a square that has two pins uh one on the top one on the bottom two pins on the left two on the right now it may seem since there's a square component that the easiest first thing to do is to draw a square but what we found in flux is that if you do it this way it doesn't really properly render and flux whenever you're creating any kind of shape whether it be a rectangle or a square or triangle you actually want each side of it to be its own distinct object so that's what we're going to do i'm going to show you how to do that now ", "metadata": {"start": 219.2, "video_id": "eXBq52rjoxA"}}
{"text": "so i'm going to start with this square i'm going to come down to the dimensions here and unlock it so that we can change the width and the height independently i'm going to change it to a height of 1 pixel so that's one side of it i'm going to click on it and actually turn off i'm going to turn off the border by zeroing it out we don't want a border in our image and then the important part of it is the fill it can be any color i'm just going with black just for ease zoom in so this is going to be one side and what i'm going to do is actually i'm going to ", "metadata": {"start": 250.72, "video_id": "eXBq52rjoxA"}}
{"text": "make it 40 long and i'm going to copy and paste to get our four sides then i'm actually going to rotate two of them to 90 degrees so that there are sides and then what i'm going to do is use the alignment guides to create a square out of this okay so there's our square for each pin i'm going to just copy one of the sides paste it and i tend to make pins 10 pixels long ", "metadata": {"start": 281.84, "video_id": "eXBq52rjoxA"}}
{"text": "again i'm going to copy and paste to get six of them i'll rotate two of them and then i'm going to move the pins again using the alignment guide and actually for these two i'll just copy the two on the side and paste them over great so that's the part we want to create so the next step couple of steps are really important um flux the part will not render properly if you leave ", "metadata": {"start": 312.88, "video_id": "eXBq52rjoxA"}}
{"text": "the color in black so what we actually do is highlight the whole thing go back to the fill color and make it all white and while we have it highlighted we also need to group the whole thing so group it however it works in your tool in vector it's going to be this unity add and so now you can't see it but of course it's there so the last step is to export it click over here now the important part here is you don't want to export the whole page you're actually just going to export your selection so make sure that the parts highlighted click selection ", "metadata": {"start": 345.039, "video_id": "eXBq52rjoxA"}}
{"text": "and then download so i'm going to ring you can't see it but i'm going to rename it as six pin demo and now we'll head back to flux okay so here's our part and we're going to go to the side on the panel on the right go down to assets click manage click on change and i'm going to find you again can't see this part i'm going to find my svg ", "metadata": {"start": 375.199, "video_id": "eXBq52rjoxA"}}
{"text": "file and you can see it uploaded and you can also see the new part there it's a good idea to also rename this i'm going to go ahead and do that and then click done so if you go back to the project you'll see that the symbol did in fact update however we still have the problem where the pins are all scratched in the center so we've got to move those we're going to come back here so in the part document we're going to find the one we're creating drag it in where it has the drag in the asset and the way to map the pins is if you ", "metadata": {"start": 406.16, "video_id": "eXBq52rjoxA"}}
{"text": "click on each one you'll see on the right in the panel you'll see in the properties there's an x y coordinate of zero for each of them so that's why they're on the middle so we need to move it by changing the xy coordinates now you can either do that by trial and error or in our case we created the svg so we know where the things are so we have a 40 by 40 square with a 10 pixel long pin so half of 20 is a half of 40 is 20 plus 10 is 30. so we know that if we move vcc up y30 it should be where we want it to be hover it over again to refresh and in ", "metadata": {"start": 437.28, "video_id": "eXBq52rjoxA"}}
{"text": "fact there it is so we'll do the same thing with ground by y of negative 30. and there that is so for the input and the output pins we know it's 30 pins on either side and i'm going to guess that it's 10 pixels up and pixels down and there it is you know if it's a little off you can use the up and down right here to move them a little bit up and down but i'm going to assign the rest of the pins and as you can see we've mapped them ", "metadata": {"start": 467.84, "video_id": "eXBq52rjoxA"}}
{"text": "properly let's head back to our project and there we have our custom created part symbol i just want to show one more thing this is an example of a nested part that has a circuitry that you can simulate we've created the circuit as you would any other then we went through all the steps we just went through here to create this symbol so i hope that was helpful if you have any questions please feel free to reach out also if you'd like to see any other tutorials i'd love to hear about it we're looking to create more ", "metadata": {"start": 501.52, "video_id": "eXBq52rjoxA"}}
{"text": "hi i'm lance and we're going to talk about collaboration in flux in this tutorial i'm going to cover sharing and permissions staying in sync with your team and real-time multi-player editing let me just pull up an example here so you can think of flux at a high level like a virtual shared space where you can collaborate with other people in real time while you're building hardware so say you're working on something and you want to involve others to get feedback or help ", "metadata": {"start": 0, "video_id": "kS9E9eSG-Ow"}}
{"text": "maybe other electrical engineers mechanical engineers firmware developers maybe even troubleshoot something with manufacturers and you don't want to worry about anybody messing up your work so there's a couple ways to do this the first way to share is really simple is just to copy the url and paste that into an email slack wherever you want to communicate um and flux works similar to google documents so ", "metadata": {"start": 31.92, "video_id": "kS9E9eSG-Ow"}}
{"text": "it updates in real time to the cloud this means that whoever has a link is always going to see the latest and greatest so there's no no need to email back and forth marked up pdfs or anything like that [Music] the other way to share if you want a little bit more fine-tuned control is to use the share button on the top right here that pulls up a dialog where you can you know copy the link again and control permissions at a high level so this means that anybody who has that ", "metadata": {"start": 63.12, "video_id": "kS9E9eSG-Ow"}}
{"text": "url will be able to comment view edit or you can turn sharing off if you want even more fine-tuned control you can control permissions at a individual level here so first you invite people by entering their username and you can control their permission here and click add and then for the people you can see the people who have access to the document down here in a list and you can update their permissions on case-by-case basis ", "metadata": {"start": 93.52, "video_id": "kS9E9eSG-Ow"}}
{"text": "a great way to collaborate with your team is through commenting so you can create a comment anywhere on the canvas which is really helpful if you're trying to have discussion within the context of your question to bring up a comment you can just right-click and click insert comment or you can also use the hotkey command g and that'll bring up a dialog and let's just say ", "metadata": {"start": 125.52, "video_id": "kS9E9eSG-Ow"}}
{"text": "did you find the source for this antenna and then you can hit enter or the send button and anybody else who is collaborating on this document will receive an email notification um that looks something like this so the person who commented has replied or added a comment to your document so it'll be easy for other people to to stay in the loop with these ", "metadata": {"start": 156.319, "video_id": "kS9E9eSG-Ow"}}
{"text": "conversations and sometimes with designing hardware a photo is really helpful so the commenting feature here also allows for like images and video to be attached let's say you want to share you know pin locations or some documentation maybe an image of a prototype you can also do that here another tip is that you can pin a comment thread or an image so that anybody who opens this document ", "metadata": {"start": 189.44, "video_id": "kS9E9eSG-Ow"}}
{"text": "will easily see that you've like put an image here or see your comment so to do that you just click the three dots at the top right of the comment and say pin or unpin the thread you can also resolve comments to remove the pin from the canvas every now and then mistakes might happen say you accidentally gave somebody editing permission or you broke your simulation there's always a way to use the change ", "metadata": {"start": 222.56, "video_id": "kS9E9eSG-Ow"}}
{"text": "history to revert to a previous version of the document you also have unlimited undo and redo so to use the change history you just use this top left hamburger menu and go to change history and here you'll see literally every action anybody has taken on the document since it began and you can click on an entry to view that version of the document and just click restore to restore that ", "metadata": {"start": 256.0, "video_id": "kS9E9eSG-Ow"}}
{"text": "version another really helpful tool you can use for collaboration is real time multiplayer editing and that's just a fancy way of saying if i share a link to this document or somebody else is looking at it at the same time that i am i can see their cursor position and actions in real time so here you can see cassandra moving maybe pointing to things selecting objects moving them ", "metadata": {"start": 286.479, "video_id": "kS9E9eSG-Ow"}}
{"text": "this makes doing design reviews or debugging circuits um much more efficient the other thing to note here is that you can see the number of real-time collaborators or just like other people looking at your document on the top right here so see a little circle that's cassandra if you if there were five people in the document you'd see five circles right here there's just one so that's it um we've covered sharing ", "metadata": {"start": 319.28, "video_id": "kS9E9eSG-Ow"}}
{"text": "this is the editor in flux so here you can build your schematic diagram you can simulate your circuits and you can collaborate with others on your team in real time this example project is a emg controlled robotic hand we have some sensors over here that are all wireless controlling some servos over here that you're using some microcontrollers so we can break up this interface into ", "metadata": {"start": 0, "video_id": "tU_IMaEjTpU"}}
{"text": "four different parts on the left here we have the parts browser so you can search for parts like you might expect uh drag them onto the canvas and these are these are generated by the community and curated by the community so the most favorited parts appear at the top and the most used parts appear at the top so you can use them with confidence the parts list here contains all the parts that are used in your schematic so if you have a large or complex ", "metadata": {"start": 33.52, "video_id": "tU_IMaEjTpU"}}
{"text": "schematic it's a little bit easier to find what you're looking for you can also click on the parts here and it'll highlight it on the schematic to help you locate it uh and the real meat of the interface is the canvas here so here you can you know manipulate parts you can connect by using the terminal connections you can um also collaborate in real time so it's important to know that this is all ", "metadata": {"start": 63.76, "video_id": "tU_IMaEjTpU"}}
{"text": "stored in the cloud in real time just like google docs so if somebody i'm collaborating with makes an edit i can see that edit in real time so you don't have to worry about if you have the latest and greatest document here um you can right click to insert a comment you can right click on a part here to see all the available actions that you can take on a part so you can open it to view its internal schematic diagram or ", "metadata": {"start": 95.68, "video_id": "tU_IMaEjTpU"}}
{"text": "code that runs the part you can delete it you can manipulate it flip rotate clockwise counterclockwise if you select multiple parts you can align them space evenly even automatically connect parts uh which is really helpful if you have you know microcontroller with like 40 pins or something another thing we talked about is commenting so we think it's really important to have conversation within the context of your schematic so you can create a comment and have threaded conversations ", "metadata": {"start": 127.119, "video_id": "tU_IMaEjTpU"}}
{"text": "that include images video and other rich ways to communicate uh so you can see here we have a video of the robotic hand moving uh using these five servos here um and then on the top navigation over here on the left we have a drop down that allows you to create a new document you can create a new part from a template ", "metadata": {"start": 158.879, "video_id": "tU_IMaEjTpU"}}
{"text": "you can view the change history which is really helpful if you're working with a team it might be worried about other people messing up your work will worry no longer you can actually restore any change that's ever been made in your document back to a previous version you can also clone a document to make a copy you can import parts if you have an existing part library you can use kicad part libraries version 4 or later you can also export to kicad for ", "metadata": {"start": 190.319, "video_id": "tU_IMaEjTpU"}}
{"text": "laying out pcbs you can export our flux document and image or build materials if you want to source the parts digikey mouser you can do that and you can also archive here so over here on the left you can see the author of the document and you can click on that to view their profile and other documents and parts that they've created or worked on to the right here we have the title of the document which all you have to do is click on and ", "metadata": {"start": 220.959, "video_id": "tU_IMaEjTpU"}}
{"text": "edit you can see the save state of the document here as well as to the right undo and redo of course the hotkeys control z and whatnot work just fine there as well you can start documents to favorite them to your profile so if you find a project or part that you really like you can use the star feature here that also communicates to the creator that you dig what they're working on gives them a little bit of feedback ", "metadata": {"start": 251.599, "video_id": "tU_IMaEjTpU"}}
{"text": "you can fork their document here so if you see something that you like and you want to make some adjustments or improvements you can fork it while retaining the forking history to the right here we have all the concurrent users of this document as you can see here brooks is actually in the document hovering over the servo right here i can see his position in real time as well as his moving or editing and the content on the canvas to the right of that we have sharing controls ", "metadata": {"start": 282.56, "video_id": "tU_IMaEjTpU"}}
{"text": "so you can actually just copy the url to save i mean to share a link with your collaborators you can copy it here and you can control kind of high level um you can turn sharing off so that only you can see it anyone can edit anybody can view anybody can comment if you want more fine grained controls you can click on advanced there and then control at an individual level what permissions people have and then wrapping up the nav bar on the ", "metadata": {"start": 314.24, "video_id": "tU_IMaEjTpU"}}
{"text": "right you can click on your photo to get back to your profile view all the keyboard shortcuts um a link to documentation which contains tutorials for things like learning how to use the simulator you can give us feedback on the product which we always love to hear you can vote on other feedback that's been submitted by other users from the community as well as see our product roadmap from there you can also join our community thread post your projects join conversation ", "metadata": {"start": 345.68, "video_id": "tU_IMaEjTpU"}}
{"text": "there and log out on the right here we have the inspector if you don't have anything selected that's just showing information about the document that you're on so here we have a thumbnail of the emg controlled robotic hand we have a description when it was created when it was last updated and by who where it was forked from who the contributors are then other properties like documentation assets and then some controls for the ", "metadata": {"start": 376.0, "video_id": "tU_IMaEjTpU"}}
{"text": "simulator now when you click on a part you get contextual information on that part so you can change the designator you can view the part name the description you can change the position of the part on the canvas with really fine tuned controls here you can actually also select the part version because remember these are generated by the community so there's updates and you always want ", "metadata": {"start": 408.96, "video_id": "tU_IMaEjTpU"}}
{"text": "the latest you can select it there and see the creator of the part for the simulator you can see this when you're simulating a circuit you can see the state of that part and we'll do uh we'll demo this in a later tutorials um but you can see the metrics pop up here you can also see if that part has controls like a push button or a potentiometer with like a slider or something like that you can see them and use them right here ", "metadata": {"start": 440.479, "video_id": "tU_IMaEjTpU"}}
{"text": "we also allow the creation of unlimited properties so if there's a way that you like to work already maybe you have substitute parts or something like that you can actually edit and create unlimited properties here so we have a bunch of defaults you can use that the community has generated but you can also of course add your own and in future tutorials also go over how to use the code editor ", "metadata": {"start": 470.96, "video_id": "tU_IMaEjTpU"}}
{"text": "hi i'm gerwin in this tutorial we're going to cover an introduction to the simulator simulator outputs as well as we will look at one of the my simulated circuit as an example so how the simulator works flux has one of the world's first programmable simulator that means that you can actually write and publish your own simulation model to the community library so instead of having to hunt down those ", "metadata": {"start": 0, "video_id": "H5HykNQmQBg"}}
{"text": "models from various manufacturers and sources you can stand on the shoulder of others all models are on the same platform and and compatible with the same simulator when creating a simulated circuit just make sure that you're using part that hub simulation model so you can tell if apart as a model by the icon here the simulation model or by its internal you know circuit ", "metadata": {"start": 33.2, "video_id": "H5HykNQmQBg"}}
{"text": "there's actually two ways to determine the function of a part either by a code or by its internal circuit i will going to discuss that one later on so let's open up this fix resistor and let's take a look at its model so i'm going to right click and open that one to display the simulation model of this fixed resistor just click on the ", "metadata": {"start": 66.159, "video_id": "H5HykNQmQBg"}}
{"text": "code here on top and here as you can see it's it's fairly easy to understand it's written and typescript and if you're familiar with programming we have also a ton of documentation if you're interested in writing your own models or modifying existing models by working apart as i mentioned the other way apart can function is through its internal ", "metadata": {"start": 96.64, "video_id": "H5HykNQmQBg"}}
{"text": "schematic diagram in this example you can see that i have a low noise amplifier here on my canvas and it's a part right but if i click on this uh if i'm going to click and open this part to view its internal schematic just right click and select open which i already did here and as you can see this is the internal schematic diagram of that low noise amplifier it's terminated with three terminals as you can see here ", "metadata": {"start": 127.6, "video_id": "H5HykNQmQBg"}}
{"text": "uh signal in and rf out plus dc that's the bias dc and here ground if we go back to the previous uh document as you can see that's the three pins for that part signal in dc rf out plus dc and ground let's open one of my circuit here the ac to dc converter to see the simulator in ", "metadata": {"start": 159.76, "video_id": "H5HykNQmQBg"}}
{"text": "action yeah i know what you're thinking that's not the ac dc button so let's open the ac dc converter circuit in here and let's just wait for a couple of seconds for this uh project to load so what we're looking at now is simple ac to dc converter circuit the source that we have here is just a sine wave generator set at 60 hertz and 12 volts peak to peak ", "metadata": {"start": 190.8, "video_id": "H5HykNQmQBg"}}
{"text": "no base offset and no dc offset just your ordinary wave generator attached to it are four rectifier diode on a bridge mode configuration plus a 1000 microfarad polarized capacitor on the load side we just connected a light emitting diode and and a 500 ohms resistor this is just for us to verify that we actually have a direct current on the ", "metadata": {"start": 224.879, "video_id": "H5HykNQmQBg"}}
{"text": "output as you can see the moment i open this document the simulator has started right away this is because the simulator in flux is always active it's always on to display the output of a part on the canvas simply click on the part on the canvas and on this factor look for the state panel from here you can see that we have couple of outputs that we can enable or ", "metadata": {"start": 254.959, "video_id": "H5HykNQmQBg"}}
{"text": "disable if you want to display the output for example the voltage on the anode side just click on this i icon and it will be added up onto the can bus same way if we disable if you want to disable an output click on the iphone i icon again to disable it you can also move the simulator output ", "metadata": {"start": 286.24, "video_id": "H5HykNQmQBg"}}
{"text": "display somewhere else on your canvas just drag the designator block somewhere else let's say for example this led uh this resistor load and probably this uh capacitor here and as you can see i could i could see it i could see them in a row form or i could put them stuck in top of each other for me to easily compare their output ", "metadata": {"start": 316.96, "video_id": "H5HykNQmQBg"}}
{"text": "to adjust the simulation speed of your circuit click on the uh empty part of your canvas and on the inspector look for the simulation panel as you can see here i could adjust the time per step size as well as the unit and the simulation speed but for now i'm just using 500 micro second ", "metadata": {"start": 348.24, "video_id": "H5HykNQmQBg"}}
{"text": "step size at the very lowest simulation speed now let's take a deeper look at how to write a simulation model for an operational amplifier or commonly known as op amp i created a very simple circuit here which by the way it's not simulated yet i mean on the output because the op amp doesn't have any simulation model yet so we are going to write a model for it ", "metadata": {"start": 379.28, "video_id": "H5HykNQmQBg"}}
{"text": "based from the documentation available at docs dot flux that ai so you can see here the r2 doesn't have any output or current uh yet it's because it relies on the output of the the output side of the operational amplifier so let's take a look at the docks that flux that ai the documentation about the operational amplifier and we can see here this is ", "metadata": {"start": 412.319, "video_id": "H5HykNQmQBg"}}
{"text": "the example typescript code or the model for an op amp so we need to call out the type to be op amp and i think we can also control the gain the max voltage the minimum voltage as well as we need to also to declare some constant the terminal uid for each of the terminal so here i'm going to ", "metadata": {"start": 442.56, "video_id": "H5HykNQmQBg"}}
{"text": "write a simulation model for this op amp here which i already uh open in here on another browser tab here and this is the in input one input two and then the output it corresponds to the terminals of the part here so from here uh to start writing a simulation code for this op amp uh you need to go to the code tab here ", "metadata": {"start": 472.639, "video_id": "H5HykNQmQBg"}}
{"text": "and as you can see i already started uh the template here which uh let's start with the declaration of the constant so as you can see here the input terminal one which i commented here that's the in one which is this terminal and then next would be like n2 which is this one the other one out i i intentionally uh made it made this one blank for me to ", "metadata": {"start": 504.56, "video_id": "H5HykNQmQBg"}}
{"text": "show to you guys how to get the uid of a terminal so go back to the schematic diagram and click on the terminal that you want to get the uid and then on your keyboard copy command c or control control c and then go to this website here json formatter and just paste it here just paste it's a bunch of code but it will reformat the ", "metadata": {"start": 538.0, "video_id": "H5HykNQmQBg"}}
{"text": "the code for it to be like a very easy to read so let's process that one and as you can see here these are the formatted version of the code i mean the whatever you copied on the terminal so what we need to look at here is the uid so let's take a look where's that uid here maybe somewhere at the bottom here yeah i already found it so here uid and this ", "metadata": {"start": 568.88, "video_id": "H5HykNQmQBg"}}
{"text": "is the value so we need to copy that one copy and then go back to here on the code and we need to paste that one in here so that's it that's how that's how you declare a constant for a terminal so we already completed that step the second constant here is the output voltage that we need to use during the calculation event let's go to the next part of the code in ", "metadata": {"start": 599.92, "video_id": "H5HykNQmQBg"}}
{"text": "here for the op amp simulation model so after declaring all of the constant here the next thing will be like to set up an event so i'm just going to paste something here so i call this one a setup event so this section of the code will fire up as soon as you load a document or a circuit or if this op-amp is being ", "metadata": {"start": 632.64, "video_id": "H5HykNQmQBg"}}
{"text": "used as an instant to someone else's document so as you can see here there are a couple of constant before calling out the simulation model so first one here is like the minimum output maximum output and then the gain so this constant are just actually looking for the value of the property that has a name minimum output if there's no value set the default to negative 15 so it's ", "metadata": {"start": 662.72, "video_id": "H5HykNQmQBg"}}
{"text": "looking for the property with the name minimum output as you can see here on the right side i actually added a couple of properties so minimum output maximum output and then the gain we need to make sure that the name here corresponds to the string that we are using here so as you can see it's identical minimum maximum and then again so that way our simulation model will be flexible so ", "metadata": {"start": 693.36, "video_id": "H5HykNQmQBg"}}
{"text": "once the simulator runs uh it will use the value that is like uh available here to replace uh whatever we are going to use in here so if we look at again on the uh on the op-um example here these are an example of a very basic uh hard-coded uh value this one is like if you every time you need to change something maybe the gain you need to go inside the code and then change the gain to maybe like you know ", "metadata": {"start": 725.36, "video_id": "H5HykNQmQBg"}}
{"text": "50 000 k 50k 10k something like that but in here because we are using the properties picture so every time you change this minimum output it will also reflect back in here so the last part of our simulation model here is the calculation event basically this calculation event will just show the output voltage if there's any uh on the output terminal of the op amp basically ", "metadata": {"start": 757.839, "video_id": "H5HykNQmQBg"}}
{"text": "it's the output because we actually declared the constant in here if you remember the per the port constant the output voltage that's the one that being utilized uh on this particular section the calculation event so there you go guys uh we already completed you know writing uh you know we created the simulation model for an op-amp that's how easy to create a simulation model in flux and just to ", "metadata": {"start": 790.24, "video_id": "H5HykNQmQBg"}}
{"text": "make sure that we wrote something correct in here based on the behavior of a normal operational amplifier we need to go back to the previous circuit which is like the inverting amplifier and as you can see we are now seeing something on the resistor number two let me just refresh this uh circuit just to make sure that we are getting the latest output based from the ", "metadata": {"start": 822.56, "video_id": "H5HykNQmQBg"}}
{"text": "code or the simulation updates uh that we have made in here so as you can see here the input voltage of the sine wave is 5 volts peak as you can see here 5 volts peak and it's also being shown here on the output on the anode and as you can see the output on the r2 on the p2 terminal which is connected to the output of the op amp is showing ", "metadata": {"start": 854.8, "video_id": "H5HykNQmQBg"}}
{"text": "something like negative 14.9 up to 14.7 volts so as you can see the op-amp is working it's amplifying the uh the input signal uh i'm i think the gain is like something like 10 000 k i mean 100 000 so if we change this property because we wrote a simulation model that is flexible ", "metadata": {"start": 887.68, "video_id": "H5HykNQmQBg"}}
{"text": "now we can actually control the the behavior of this operation amplifier or the basic values of it just by changing the property here so let me just change this gain to maybe like 10k and then as you can see the output changes to something that corresponds to that gain that we upset so there you go guys ", "metadata": {"start": 917.92, "video_id": "H5HykNQmQBg"}}
{"text": "hi i'm jarwin in this tutorial i'm going to talk about creating and importing parts we will cover how to import parts forking and modifying existing parts and lastly how to create parts from scratch so without further ado let us start on the options that you don't see a part you need in the plux community library we make it easy to create and upload your own parts ", "metadata": {"start": 0, "video_id": "BW7wmnnLsx4"}}
{"text": "importing is the fastest and easiest way to create a new part in flux right now we accept kaicad keycard.liv file but we plan on supporting more file formats in the future first select the hamburger drop down up here from either from the editor page or from from your profile page select import then kycad parts then you have to find that particular part a file ", "metadata": {"start": 30.48, "video_id": "BW7wmnnLsx4"}}
{"text": "from your local computer then click open you can actually import more than one part at a time while you are on this model this is the linear regulator category from kaicad it's a bunch of parts but i'm all interested on this first one i'm going to click on the import button and it will open up a new browser tab with the document already loaded as well as the part already imported ", "metadata": {"start": 61.12, "video_id": "BW7wmnnLsx4"}}
{"text": "on your account as you can see this is the internal schematic for this part yep it is essentially composed of only pipe terminals to represent the pipe pins of this part remember the terminal is the main building blocks of parts in flux after importing a part you can right away update the description as well as if you want to add more properties like datasheet package code and so on now let's talk about how to fork and ", "metadata": {"start": 93.04, "video_id": "BW7wmnnLsx4"}}
{"text": "modify a part you might already know by now that we are a big believers of the power of open source if you find a part created by someone that needs to be improved maybe it needs a simulation model or the pin labeling is wrong you can easily fork your old copy so can so you can modify that part for example if you want to modify this particular part created by the username adrian95 just click ", "metadata": {"start": 126.479, "video_id": "BW7wmnnLsx4"}}
{"text": "on the hyperlink of the part here from the part browser and that will open up a new browser tab with the main document of that part as you can see here this is the main document of this part from the username adrian95 to fork this particular part look on the top navigation bar and click on this fork button here after you click on that particular ", "metadata": {"start": 157.2, "video_id": "BW7wmnnLsx4"}}
{"text": "button it will open up a new browser tab with your own copy already loaded on your account as you can see here you can update the description of the part or maybe you want to add more properties or maybe you can actually update the name of the pin label in case it's wrong you can actually write your own simulation code as a part of your uh modified version copy of this ", "metadata": {"start": 189.76, "video_id": "BW7wmnnLsx4"}}
{"text": "uh part that you just port now let's create a part from scratch as i mentioned terminal is the main building blocks for a part if you want to create a six pin ic simply create a new blank document then drag six terminals onto the canvas i'm just going to duplicate this one by using the keyboard shortcut command ", "metadata": {"start": 221.519, "video_id": "BW7wmnnLsx4"}}
{"text": "c and command b for copy and pasting so there is already three terminals i'm going to duplicate it again so we have now a six terminal onto the canvas right so this will represent the pins of your part but before that make sure that you name your document as the name of the part so for now i'm going to name this new blank document to signal analog switch ", "metadata": {"start": 253.04, "video_id": "BW7wmnnLsx4"}}
{"text": "[Music] and to finally set this as a part simply activate this button here to publish it as a part on the part community library let us use that signal analog switch that we just created a while ago in this diversity controller project that i built in flux first let us search for that part in the community part community library here and then drag and drop ", "metadata": {"start": 285.28, "video_id": "BW7wmnnLsx4"}}
{"text": "that part into the canvas let's zoom in a little bit for us to see the details the symbol also the pin label uh of that part so as you can see p1 p2 p3 so on and so forth so what if you want to update uh p1 or maybe you want to update p6 or maybe you just want to update the naming you know the naming of the terminals simply ", "metadata": {"start": 315.759, "video_id": "BW7wmnnLsx4"}}
{"text": "right click on the part and then click open it will open up a new browser tab which already uh opened here and let's say i want this p1 to be bcc click on the terminal and then on the designator here i want this one to be bcc and then on the p6 uh ground and maybe on the p4 i'm going to just name it like fresh or maybe a threshold so without pressing anything the document already ", "metadata": {"start": 346.08, "video_id": "BW7wmnnLsx4"}}
{"text": "synced to the cloud server so if we go back to the diversity controller to where this uh part is being used as an instance you can see that the pin labels are now updated vcc trash and ground flux works in the cloud so everything is always sync just like google docs you don't need to press any same button at all it's always active we all know that most of the time ", "metadata": {"start": 378.24, "video_id": "BW7wmnnLsx4"}}
{"text": "parts are not always rectangular parts of their own symbol for their own representation so for rc store it should look like this and for a ground it should look like this that's their standard symbol so in order for us to update the default symbol for this part that we created we need to upload and use a custom symbol to do that we need to go to the main document of the of the part this signal analog ", "metadata": {"start": 411.84, "video_id": "BW7wmnnLsx4"}}
{"text": "switch and then on the inspector we go to the assets panel and we need to add a an asset a file flux supports different format for symbol but in our case i'll recommend let's use that sbg format so i need to add an item i need to locate that from my local computer and then once it's loaded up it will be set as a default symbol as well as ", "metadata": {"start": 442.96, "video_id": "BW7wmnnLsx4"}}
{"text": "thumbnail as you can see here the thumbnail is already updated now if we go back to the diversity controller project we will see that the symbol has been updated right away right but you wonder why is it that all of the pins are all at the center it's because we it's because we updated and uploaded the custom symbol we need to map each of the pin in reference to the symbol so let's go ", "metadata": {"start": 474.479, "video_id": "BW7wmnnLsx4"}}
{"text": "back here and we need to search for that signal analog switch on the part browser and we need to put it here on the canvas it's because why i did this one it's because i need to preview while i move the position of each of this terminal so let's say you want to put the bcc here on the top left uh position here based on the maybe based on the data sheet the bcc should be here ", "metadata": {"start": 507.68, "video_id": "BW7wmnnLsx4"}}
{"text": "so we will we will follow that one so to do that click on the bcc terminal and then on the properties panel look for that symbol pin position here as you can see it is set to zero zero all of the terminals terminals are set to 0 once you upload the custom symbol so i'm going to adjust and manipulate this x and y value so x if you move to the left ", "metadata": {"start": 540.72, "video_id": "BW7wmnnLsx4"}}
{"text": "it's negative if you move to the right positive for the y-axis tap should be positive and downward movement should be negative so for the bcc uh negative 50 57 maybe so as you can see the bcc moves so i need to uh move that up so maybe this one should be 14 yeah 14 so and maybe the p2 ", "metadata": {"start": 571.36, "video_id": "BW7wmnnLsx4"}}
{"text": "we need to put it here on the top center so i need to click on the p2 and then maybe 56 so you need to play on the value here just by clicking on the up down arrow i already did this one that's why i'm familiar with the values of their x and y so that's the bcc and p2 so what if for the ground uh it should be maybe you want it to uh ", "metadata": {"start": 602.72, "video_id": "BW7wmnnLsx4"}}
{"text": "to be here on the bottom center so click on the ground terminal and then it's because p2 is directly at the bottom of it the ground right so we just need to reverse the value of this p2 so it should be negative 56 so click on that ground and then negative 56 and as you can see once we hover our mouse to to this part here to the symbol it moves ", "metadata": {"start": 633.6, "video_id": "BW7wmnnLsx4"}}
{"text": "so now we need to actually do that mapping to all of the terminals and if you go back to the previous uh diversity controller you will see that bcc p2 and ground are now correctly mapped so from now on once you're done mapping out the the rest of the terminal you can now use this uh part that you just created to any of your project so that's it guys uh we have covered how to create parts ", "metadata": {"start": 663.839, "video_id": "BW7wmnnLsx4"}}
{"text": "welcome everyone i'm lance i'm a co-founder at flux i'm really excited about what we're gonna show today and uh i appreciate everyone joining in on this i know you got your holidays beginning and work kind of winding down so uh appreciate you joining us this is our holiday special um town hall so here's a rough agenda we'll be covering today so we'll do a brief introduction just to frame what we're ", "metadata": {"start": 0, "video_id": "XcGVrDmrm3c"}}
{"text": "going to be talking about then we'll have our surprise and uh then we'll have some time for discussion some q a uh and this is you know it's a less formal event so feel free if you have questions or anything like that you can add them in the chat so and we'll do our best to get to them and address them does that sound good cool um so i'll hand it over to matthias he's just going to talk about ", "metadata": {"start": 30.96, "video_id": "XcGVrDmrm3c"}}
{"text": "what flux is if it's this is your first time or whether you've been in the private beta kind of poking around a bit um and sort of who we are what we do and a history up to this point so i'll leave it to him yeah hi everyone welcome matthias you know for those who don't know me also one of the founders here thanks for joining us today it's very exciting um you know we've been hard at work the ", "metadata": {"start": 62.96, "video_id": "XcGVrDmrm3c"}}
{"text": "whole year and uh really stoked here to for a little demo we're gonna give you today um how this all started um yeah i mean you know we've all been like in harvard software for like one or two decades and you know we woke up one morning and realized man this is just you know how people throw around that hardware is hard and like one morning i just stopped to accept that you know i did it we just got to the point it's like why is this so difficult this doesn't have to be so difficult you know it doesn't have to be so cumbersome i mean you know if you've ", "metadata": {"start": 93.68, "video_id": "XcGVrDmrm3c"}}
{"text": "done any other work all sort of hardware in the last 20 years you know the world's come a long way you know and then hardware we're still like you know using methods from the 70s um like i had that yeah epiphany i guess you could say that like you know the eda software hadn't really changed since i went to college and that's like over 20 years ago the only thing they had practically done is i put it over to the next windows version you know and it was just as inaccessible and cumbersome to use and that's just you know the tip of the iceberg so you know we started talking to a lot of ", "metadata": {"start": 124.159, "video_id": "XcGVrDmrm3c"}}
{"text": "friends you know who also work in in harper and whatnot you know at startups or like larger companies like apple and they realized yeah i mean this wasn't just us being upset you know on a monday this was just like you know everybody agreed with that and yet nobody had like you know gotten into it and just tried to like you know disrupt the whole thing and i think that's in part you know because like yeah i mean you know the the issue starts with the with the design tools with the eda tools and you know be building these or we imagine this is just like a enormous effort and you know we went to burning man that ", "metadata": {"start": 156.64, "video_id": "XcGVrDmrm3c"}}
{"text": "yen and came back fired up and decided we would be the ones be insane enough to just rebuild these this tool and everything around them um and that was yeah 2019 october september 2019. so two years ago um [Music] and so you know when we started uh yeah like i said i'm on a huge task right you know if you think about the a-tools you have like a schematic editor in there you know uh uh sometimes of individual simulation or outside simulation you know the pcb design of course ", "metadata": {"start": 188.4, "video_id": "XcGVrDmrm3c"}}
{"text": "you know 50 years of feature density and existing tools so we decided to like you know slice the cat a little bit start with schematic and just warm ourselves up i think what was very clear from the beginning is that if we wanted like to have real seamless collaboration that this thing had to live in the browser you know back 2016 19 you know like figma had just become like you know gotten this like breakout success and that was like you know very performative high features in the graphic design software in the browser and so it was clear ", "metadata": {"start": 219.519, "video_id": "XcGVrDmrm3c"}}
{"text": "you could build this in the browser um [Music] and that would also make it easy right to get like your team involved not just you know be a piece of software that lives on the east windows machine in the corner of the office you know with all the project files locked away so yeah we started with schematic and went down to video collaboration and worked us all forward you know and warmed yourself up a little bit you know figuring out how to build application that scale uh uh in the browser um and then i was always going to give away the ", "metadata": {"start": 250.879, "video_id": "XcGVrDmrm3c"}}
{"text": "surprise here lance i don't know what's the plan here she'll pass it back to you what we've been up to the last six seven months no that's fine if you want to do the the reveal the big reveal into the big piece you're missing right if you want to design hardware as the mechanical piece um [Music] so you know we started working on that you know like i think we made the first commit in june june 2nd or so um and so we're really stoked here because you know we have a first version to share ", "metadata": {"start": 281.04, "video_id": "XcGVrDmrm3c"}}
{"text": "of our mechanical pcb editor um so i'm really excited about that it's been a hell of a lot of work i will say yeah definitely just to frame it up a little bit more you know so we've we launched a programmable simulator you know real-time collaboration permissions uh schematic editor and it was all very exciting for a lot of people but uh in talking to you know having conversations on our slack channel ", "metadata": {"start": 313.28, "video_id": "XcGVrDmrm3c"}}
{"text": "talking to customers one-on-one you know the pattern is like yeah cool but how do i build a pcb because of course we all want a pcb in hand at the end of the day and you know this was kind of it's a it was a big internal conversation you know like do we build do we spend our time and money and resources building integrations with existing pcb editors or do we entertain building something from scratch and we know this would be like a serious undertaking that ", "metadata": {"start": 343.52, "video_id": "XcGVrDmrm3c"}}
{"text": "we didn't want to take lightly and it turns out you know talking to all of you so you know really kudos to everyone for these initial conversations just helping us do the discovery and identify all the problems with the existing pcb design process and you know there were many these are just some of the that i i liked and kind of wanted to highlight here so you know interoperability was a big theme i just have you know there's separate tools for simulation schematic design doing pcb ", "metadata": {"start": 375.36, "video_id": "XcGVrDmrm3c"}}
{"text": "layout um you know collaboration is pretty difficult especially uh interdisciplinary in between mechanical engineering and the pcb designers it's you know people often have to start from scratch so i'm not able to reuse components or part of the pcb design uh again and again you know the design rules checker that whole experience could be better so it's i often still have errors you know right at the end of the design process ", "metadata": {"start": 407.199, "video_id": "XcGVrDmrm3c"}}
{"text": "i'm getting ready to order that slow me down um you know it's hard it's just hard to share generally i want to share my pcb layouts easier sourcing and finding all the data getting all the footprints all in one spot making sure that all the components you know are clean i have all the documentation i have all the data i need you know tracing can be difficult and then just realizing the parts you know out of stock at the end of a design process can be pretty frustrating ", "metadata": {"start": 439.68, "video_id": "XcGVrDmrm3c"}}
{"text": "so these are some of their problems but feel free you know if you want to add a frustration that you have with the design pcb design process like feel free to add that in the chat so yeah this is what we're excited to show you today is an alpha release of the pcb editor in flux so this is a pcb editor that works in the browser and it's real time in sync with the schematic with the simulator code everything ", "metadata": {"start": 471.68, "video_id": "XcGVrDmrm3c"}}
{"text": "in the project is uh synced up so you always have you know source of truth um and this go ahead but to extend that right let's also think across clients you know um so you can have multiple clients open multiple people across the globe i mean we do this all the time like our team is distributed between new zealand and california just really everywhere uh and so we do this a lot and so i think that's a seamlessness to it that was cool here and i'm really stoked that we got out ", "metadata": {"start": 504.96, "video_id": "XcGVrDmrm3c"}}
{"text": "yeah yeah and also huge emphasis on like alpha release you know we're still we have a big vision but we're still very early uh in our process and one thing that's like really important to us is involving everyone in this design process like we want to solve problems that everyone's excited about so that's why we want to release this early and give you a chance to give feedback like let us know if there's ideas that you'd like us to tackle ", "metadata": {"start": 535.6, "video_id": "XcGVrDmrm3c"}}
{"text": "bugs problems things that you're really excited about it's all a conversation we want to keep it open yeah and that touches on a great point right that's something we like was important to us from the beginning right that like we wanted to develop this for not just for ourselves but for other engineers out there and we try to be close with people and really get into the nitty-gritty as we develop the product so you know the goal was never to like just like you know do this all in secret and then come out with a big bang because we didn't believe that would actually even work right because this is like a productivity tool for all ", "metadata": {"start": 567.279, "video_id": "XcGVrDmrm3c"}}
{"text": "of us that we use you know eight hours a day and so the details really mattered and the only way to get the details right is to just get it out you know as early as possible to people and we have done that you know over a year ago now with the schematic editor which is really crude in the beginning and then just you know based on user feedback you know slowly start getting there and it's the same with pcb i mean also pcb's probably a little bit more mature than schematic was at the time but it's the same process we just want to get out early you know before it's production ready uh to get a production ready together ", "metadata": {"start": 598.56, "video_id": "XcGVrDmrm3c"}}
{"text": "you know and what that even means you know uh uh for somebody's workflow in 2021 um you know try to like just not also boil the ocean you know what the building things we could be doing that actually nobody needs or wants or not not that way yeah and there's a couple things like we want to get really really right you know that aren't they're not there yet but i think just focusing on the right things makes a huge difference one of them is like rendering things in a realistic manner so that you know the design that you have ", "metadata": {"start": 629.279, "video_id": "XcGVrDmrm3c"}}
{"text": "matches reality as closely as possible so you know we're working with people who are experts in rendering to make sure you know everything looks correct and you're able to kind of proof everything before it goes into production yeah and this screenshot i was going to say is not a great example you know yeah but it's just so short you know where we're trying to go with this you know to get this really photorealistic uh and get the details really right here this is just for the opportunity zero yep you got it work in progress um ", "metadata": {"start": 660.399, "video_id": "XcGVrDmrm3c"}}
{"text": "so do we have that slide on the themes here okay yeah yeah there we go so just to touch on this you know this was our um you know kind of brainstorm if we started from scratch how would you want a pcb editor to work um and you know we're not there yet but this is where we're going in case you're interested seamless collaboration version control permissioning that extends beyond you know the schematic editor that we already have ", "metadata": {"start": 691.6, "video_id": "XcGVrDmrm3c"}}
{"text": "right now so all of those features have kind of floated through to the pcb editor so you can control permissions you know you don't have to share everything publicly um some version control system and everything and we looked at design rules you know we want this to be really extensible customizable basically let you do whatever you want to do you know in an easy to use easy to interactive manner and we were inspired by some of the principles behind css ", "metadata": {"start": 722.16, "video_id": "XcGVrDmrm3c"}}
{"text": "and that you should have the ability to select and cascade rules across multiple components elements um and the third thing yeah sorry maybe to speak to that i mean i feel like i know that the the ultimate dream is that the board gets layouted by itself just the way you wanted it to and that's of course hard and it's been tried many times um you know like this like black boss approach and so we realized you know this probably wouldn't work since it hadn't worked in the past so that's why this rule-based approach comes from that ", "metadata": {"start": 753.04, "video_id": "XcGVrDmrm3c"}}
{"text": "you know everybody has like a different you know from experience or taste or aesthetics or whatever you know it drives you deciding whether you like a a design or not you know there is some individuality in here um driven by different requirements and therefore like you know making with rules being able to define how the board gets layouted uh seemed like a much better approach um and so you know we're like very early here the board doesn't lay out itself today uh by itself you know but you'll see like in the demo there's like small ", "metadata": {"start": 785.36, "video_id": "XcGVrDmrm3c"}}
{"text": "things that would start to see the idea that you can systematically by setting up rules like min max kind of stuff um the that but today will assist you layouting and then down the road you know uh we'll start uh uh taking parts of the layouting over for you you know yeah and i'd say like we're really conscious of there's a lot of people who are not fans of auto routers you know we heard that a lot it's basically like you know i just don't have enough control over it or it's too black box and we think that there's some happy ", "metadata": {"start": 816.639, "video_id": "XcGVrDmrm3c"}}
{"text": "medium hybrid that allows you to have control when you need it and allows automation you know when you don't um but that's a that's a incremental process here um third thing here just being able to reuse parts of the pcb like building blocks and we'll go into some of that um called sub layouts in the demo that charm will start soon um you know like i said we want the pcb design to stay in sync with schematic simulation so there's always a source of ", "metadata": {"start": 848.0, "video_id": "XcGVrDmrm3c"}}
{"text": "truth for the entire hardware team um fifth thing here native integration with the vendors so you can have you know all the data that you need in one place you got part uh pricing and availability in real time which actually exists in flux right now and then you know this github like repository of reusable components that you can fork and build upon so that you never really have to start from scratch again so ", "metadata": {"start": 879.199, "video_id": "XcGVrDmrm3c"}}
{"text": "these are some of the principles and if you have any thoughts feel free to post them in the in the chat explore some time to to chat after the demo so that being said fingers crossed let's try a demo so i'll hand it over to jarwin and stop screen sharing and we're going to build a project from scratch using flux yep ", "metadata": {"start": 909.839, "video_id": "XcGVrDmrm3c"}}
{"text": "yeah first uh thanks everyone for uh actually joining i am a bit nervous to demo this beautiful thing so i'm kind of a bit like trying to um you know finalize my notes here but yeah let me uh share my screen uh okay i'm going to share my screen or uh lance can you give me a permission okay you're good okay ", "metadata": {"start": 941.6, "video_id": "XcGVrDmrm3c"}}
{"text": "okay can you see my screen now yeah so i'm going to turn off my video to actually conserve bandwidth okay so for today we're going to build a project in flux from schematic to pcb and less than an hour okay by utilizing sub layout i'm going to explain uh what is sub sub layout later the project that we're gonna build which i'm ", "metadata": {"start": 972.88, "video_id": "XcGVrDmrm3c"}}
{"text": "going to call it a smart haptic buzzer powered by stm32f03 okay so let's dive into creating the project first so i am here uh blank slate project uh i'm going to search for those sub layouts that i'm going to use on this project so first i need a usbc receptacle okay okay should be here the second one then let's drag that from the part ", "metadata": {"start": 1003.6, "video_id": "XcGVrDmrm3c"}}
{"text": "browser to the canvas okay you might be wondering now that it's just an ordinary usbc receptacle right uh no this is an example of a sub layout okay i just refreshed my browser uh this is an example of a sub layout that i put together for this demo this usbc receptacle has a built-in esd protection as well as well as built-in voltage regulator that will output 3.3 volts for you know per majority of mcu ", "metadata": {"start": 1036.4, "video_id": "XcGVrDmrm3c"}}
{"text": "uh if we look at it okay it only has uh it'll have four pins three point three volts the the negative the positive and ground okay so it's very simple right but let's take a closer look on what is this thing it's all about okay i just right click and then open so we are looking at the internal schematic diagram so as you can see it's a complete diagram okay it's a complete diagram this is the usb ", "metadata": {"start": 1070.08, "video_id": "XcGVrDmrm3c"}}
{"text": "connector this is the regulator voltage regulator chip with the with the filtering capacitor and this one is the uh electrostatic discharge protection okay so if we click on the pcb here tab on the top we're gonna see that a sub layout has a complete pcb layout too as you can see here uh it's routed you know you can see all of the components also the termination point in here and then ", "metadata": {"start": 1102.32, "video_id": "XcGVrDmrm3c"}}
{"text": "you know this is not exciting right let's look at the the 3d view of it okay this is how it looks like okay this is sub layout it's a small board but it doesn't matter because once you consume this sub layout on a project it will be overwritten by overriding by uh the main sub layout okay so yeah that's the that's that's the sub layout you can actually put together a sub layout right ", "metadata": {"start": 1134.0, "video_id": "XcGVrDmrm3c"}}
{"text": "now you know put all of the components complete the schematic and then layout the pcb on the pcb view and then publish it as a part that way it's already a sub layout then you can find it on the part browser okay let's take back i mean go back here on the project okay to complete that smart optic buzzer kind of thing so this is the usbc i need couple of sub layout first so i'm going to build this project using just sub ", "metadata": {"start": 1164.64, "video_id": "XcGVrDmrm3c"}}
{"text": "layouts okay so this is a buzzer i'm going to look for that buzzer okay oh yeah this one here this this is a powerful buzzer manufactured by kobeton okay so i'm starting to drag some layouts and parts here on the canvas if we take a look at the pcb view of it as you can see the default layout is kind of a bit huge so we're going to ", "metadata": {"start": 1195.679, "video_id": "XcGVrDmrm3c"}}
{"text": "resize that one later and then if we click if we take a look at the 3d preview we're going to see that the buzzer is like overlapping the part right we're going to take that we're going to solve that one later so let's just complete first the schematic diagram so this is the sub layout one the second one will be the stm32f03 okay there's a a lot of stem 32 here ", "metadata": {"start": 1227.36, "video_id": "XcGVrDmrm3c"}}
{"text": "impressive memory driving by the way you know memorizing here the the part numbers yeah so yeah this is it the stm32f03 sub layout so and also there's an indicator in the browser now if the part that you are seeing is like as a sub uh it's a sub layout you're going to see this indicator here that it has a sub layout this one is a sub layout and also if you look for a put a part that has a footprint you can see this one also here okay let's say for example this one here you can see ", "metadata": {"start": 1258.48, "video_id": "XcGVrDmrm3c"}}
{"text": "that this one is simulation model this one is footprint some other thing here like for example let's see okay here the the pain was ems 117 voltage simulator as you can see here there's a footprint and the footprint also has 3d model so that way you don't need to go to ultra librarian snappy that just to actually get the 3d model of that thing that you want to do is on your project okay so it's already been you know here for you it's okay ", "metadata": {"start": 1290.559, "video_id": "XcGVrDmrm3c"}}
{"text": "so stm32f03 [Music] 03 sub layout okay this i'm going to drag this one here this is the brain of this uh project here okay and the last thing is like this one uh [Music] what is that one oh yeah yeah the optic the drb2605 optic controller okay i'm not sure why is it that okay i need to refresh again ", "metadata": {"start": 1322.64, "video_id": "XcGVrDmrm3c"}}
{"text": "[Music] it's also hard with like sharing screen and zoom yeah consuming resources yeah okay okay i guess this is the haptic okay last one okay haptic the last one last one okay here i'm going to drag it before it loads okay okay it's here we have about three sub layout okay and last i need to you know reference all of this to ground ", "metadata": {"start": 1353.12, "video_id": "XcGVrDmrm3c"}}
{"text": "okay i'm going to complete the schematic right now okay so this one is 3.3 volts as you can see all of the usb uh you know always has you know 5 volts but because this one has a built-in voltage regulator already you can see that the one of the output terminals already 3.3 so that way we can actually like power the stm32 sub layout right away in here okay and this one is for the data data negative and then this one i guess yeah the positive okay ", "metadata": {"start": 1383.76, "video_id": "XcGVrDmrm3c"}}
{"text": "and last thing would be like this one the ground okay and the other one here is the sub layout okay i need to point out something about this sub layout because this is a sub layout that i did not actually like you know i didn't design this one if you look at the part i mean this sub layout this is commercially commercially available from other pro this is the uptick uh controller uh if you if you look at the uh the pcb preview of it you ", "metadata": {"start": 1416.4, "video_id": "XcGVrDmrm3c"}}
{"text": "might be familiar you know see that it's kind of a bit familiar to you this is like the other prot uh haptic controller that can drive motor buzzer vibration motor whatever right so yeah that one this is the sub for that okay we're going to connect this one so this one is the i2c from the microcontroller the scl and this one will be connected here the other i2c yeah this is the i2c pairs ", "metadata": {"start": 1447.6, "video_id": "XcGVrDmrm3c"}}
{"text": "then lastly another ground okay uh ground here and the other girl should be connected here okay okay few minutes more the more i mean the buzzer okay so the buzzer should be here and the other one should be at the bottom here okay i'm just going to let the trigger uh ", "metadata": {"start": 1479.84, "video_id": "XcGVrDmrm3c"}}
{"text": "been floating for now that's for triggering it for manual manual trigger okay going to okay so this one is the optic controller because we already have a voltage regulator built into the sub layout one i could just actually tap into it and yeah that's it we already have a complete schematic diagram okay let's dive down to let's dive now to the pcb which is like the most exciting part okay okay okay let's start with the 2d view okay ", "metadata": {"start": 1510.88, "video_id": "XcGVrDmrm3c"}}
{"text": "oh my god everything is at the center but yeah we're working on this one so as you can see everything is all at the center zero zero but we can position things around in here uh this project is very precise that i need to move all of the things here precisely to the last millimeter point okay so as you can see here the layout is kind of a bit huge because by the that's that's the default but you can actually like uh resize that one ", "metadata": {"start": 1542.799, "video_id": "XcGVrDmrm3c"}}
{"text": "using the rule based design system that we that we have here in flux first you have to click on the layout and then add an object specific rule so i'm going to resize this one so i'm going to call for the size rule okay and then i'm going to apply that then as you can see here i'm going uh the board should be 18 millimeter in width 66 millimeter in height but i don't need to ", "metadata": {"start": 1574.159, "video_id": "XcGVrDmrm3c"}}
{"text": "put the millimeter it's because the system depot is already millimeter okay so yeah that's already the size of the board that we are working on i'm going i could turn off this grid for you know i don't want to be irritated by those line for now okay if you open up the layout folder you're going to see all of the components here you can see here the buzzer sub layout one two three and the nets ", "metadata": {"start": 1605.279, "video_id": "XcGVrDmrm3c"}}
{"text": "these are the nets that is like based from the data from the schematic diagram so you know the way how you route things on the schematic diagram will be dictated also here on pcb okay so from pcb from schematic to pcb but in the future we're trying to work on something where in you can start on the pcb backward okay but for now it should be schematic to uh schematic to pcb for now okay so first ", "metadata": {"start": 1637.76, "video_id": "XcGVrDmrm3c"}}
{"text": "uh we have a very you know cool uh system to actually control the layer okay if you look at here at the bottom left corner on my canvas this is the layer view controller basically as you can see it's actually like a range how a physical pcb sock pulley looks like top overlay top solar paste mask then top copper and then if you're going to you know put the ", "metadata": {"start": 1668.64, "video_id": "XcGVrDmrm3c"}}
{"text": "pcb as a sandwich this is this is the uh correct arrangement of all of the layers okay uh i'm going to turn off the pace and mass for now okay so that we could see the pads in red okay and as you can see here also the default stack up for flux is four layers stuck up as you can see there's a top copper mid layer one two and then ", "metadata": {"start": 1701.2, "video_id": "XcGVrDmrm3c"}}
{"text": "bottom copper we could actually configure this one to be like just two layer stack up how to do that one click on the layout on here i need to call the stack up rule okay and lo and behold because this one is crazy okay if you look at here on the stack up let me just close the other browser tab ", "metadata": {"start": 1732.08, "video_id": "XcGVrDmrm3c"}}
{"text": "here can you believe that flags support up to 12 layer stack up [Laughter] so yeah but for now yeah we'll just consider the two layer for now standard two layer and as you can see the moment i select standard two layer this mid layer copper here will uh disappear and we will just left with top copper and then a bottom copper okay uh okay let's wait let's just wait for ", "metadata": {"start": 1764.96, "video_id": "XcGVrDmrm3c"}}
{"text": "that to actually update oh wait pages are responsive wait okay it happens okay yeah top copper bottom copper okay so now we're good let's place the component now okay buzzer buzzer i'm going to position this one so i'm just go i'm just going to manipulate the y position because i want everything to be at the center the x axis so ", "metadata": {"start": 1795.52, "video_id": "XcGVrDmrm3c"}}
{"text": "on the y position for this buzzer according to my design sheet here should be 26.5 millimeter and the moment i type in you can see the buzzer moves on the top right okay the next one will be the sub layout one which i'm sure it's kind of bit uh you know call this one confusing because the name are like that so i'm going to call this one to be the usbc ", "metadata": {"start": 1825.919, "video_id": "XcGVrDmrm3c"}}
{"text": "sub layout okay and that one should be at the bottom so i'm going to look for the layout rules panel here going to add again y position add and then uh going to enter i think this one should be negative 23 millimeters so it should be at the bottom so you can see here okay now let's just take a peek at the 3d 3d ", "metadata": {"start": 1858.32, "video_id": "XcGVrDmrm3c"}}
{"text": "view just to actually see you know that we are actually like moving things around okay that looks good let's go back to the 2d view and finally this one the i guess this is the haptic controller again by position uh the y position for this optic control should be uh yeah 12.5 millimeter okay and the last one will be uh ", "metadata": {"start": 1889.519, "video_id": "XcGVrDmrm3c"}}
{"text": "negative four millimeter okay for the y position okay that's it you can see that it started to you know started to look like a pcb at least right okay so i'm going to add a very special node here that i will going to utilize later okay i'm going to add a 3d model node to the root folder that's one ", "metadata": {"start": 1921.36, "video_id": "XcGVrDmrm3c"}}
{"text": "and another one okay going to use that one later and that is like the most coolest you know feature and flux okay so now uh we are almost done actually if you look at the pcb okay okay green board you know standard color for all pcb but they want something much cooler so let's add a board color or i mean layout and by the way in flux we call the board as layout ", "metadata": {"start": 1951.679, "video_id": "XcGVrDmrm3c"}}
{"text": "so that should be the layout color okay and i want something maybe like purple okay purple okay i'm going to click that here oh yeah right away and one thing more you ", "metadata": {"start": 1983.84, "video_id": "XcGVrDmrm3c"}}
{"text": "know you can actually position things around while you're on while you are on 3d view you can you know you are not uh limited on the 2d view you can move things around while on 3d view i could i will going to demonstrate that one later but now to actually like at least you know touch up the routing because that's the only missing you know step right now so i'm going i'll be ", "metadata": {"start": 2016.84, "video_id": "XcGVrDmrm3c"}}
{"text": "going back to the 2d view and as you can see here uh metadata okay metadata what are this metadata okay so metadata is composed of comments uh margins uh error wires and by the way we are calling rastness definitely in flux we call it air wires in flux okay air wires not rust nest so you can see here these white lines here are the ear wires i could turn them off ", "metadata": {"start": 2046.88, "video_id": "XcGVrDmrm3c"}}
{"text": "you know i could turn off also the top overlay the bottom copper i mean you know yeah that way i could actually write uh route the board easily so i just i just uh click on the error here and then they showed up right let's start here on these two pads here okay so to to start or initiate routing in flux it's ", "metadata": {"start": 2078.56, "video_id": "XcGVrDmrm3c"}}
{"text": "almost the same ux on our schematic diagram you need to over to a part and then you're going to see a dot right you click on it and as you can see uh the error will be uh will be following your uh cursor wait i actually managed to click on the right click let me refresh a bit okay well um javan does that ", "metadata": {"start": 2110.4, "video_id": "XcGVrDmrm3c"}}
{"text": "if people have questions you know um just drop them here in the in the chat and then lance and i you know can read them out and we can address those too yep yeah yeah so to continue with this one uh currently for b0 of this pcb layouting tool for clubs uh uh you yeah you are not actually like locked into 45 degree angle currently right now it's free drawing so you can actually like draw any you know acute angle but yeah ", "metadata": {"start": 2146.079, "video_id": "XcGVrDmrm3c"}}
{"text": "we're going to have something that is like much more easier to route but yeah let's just actually uh finish this route here from this uh circle pad that square path okay so i'm just clicking and then to end route i need to just click on the n pad that and as you can see the errors disappear okay that means to say you completed one of the uh net ", "metadata": {"start": 2178.4, "video_id": "XcGVrDmrm3c"}}
{"text": "segment here i can do that one also again here very quickly okay and the end pad should be here and yeah so yeah we could actually do this one you know uh very quickly but i have to demo something but yeah that's how to route here on flux and remember the model that i added a while ago ", "metadata": {"start": 2210.0, "video_id": "XcGVrDmrm3c"}}
{"text": "okay let's use that one so a model node we can use a model node by calling an asset okay so if we go back to the schematic diagram here to actually see the assets i actually attached and uploaded two model top and bottom here you can see the id bottom the other one is like top let's go back to the pcb and let's utilize that one ", "metadata": {"start": 2240.64, "video_id": "XcGVrDmrm3c"}}
{"text": "okay so here the model i'm going to call one of the asset rule okay asset rule and then i'm going to select the bottom asset the id if i go back to the 3d view you can see that the bottom is actually the bottom 3d model of this board you can see that ", "metadata": {"start": 2271.04, "video_id": "XcGVrDmrm3c"}}
{"text": "this is the bottom cover let's do the other one to make this one complete okay i'm going to call the asset and going to call the top one lo and behold we have a complete project that is like complete of 3d model as well as the pcb board now we cannot see the pcb board right let's just move this one by using uh y position okay what is this top okay i'm going to ", "metadata": {"start": 2303.44, "video_id": "XcGVrDmrm3c"}}
{"text": "move this one 36 millimeter see that nice wow yeah this is like something that nobody has done before you know don't ask me about fusion 360 because you know together with eagle because that would take you know i mean half an hour to actually like an operator account etc but here it actually happens live you know i could ", "metadata": {"start": 2338.4, "video_id": "XcGVrDmrm3c"}}
{"text": "actually position the top cover let's say z position i'm going to just pull the top cover up i mean pull it up okay 10 millimeter up see that okay let's just let's just disable the y position so that we could see something like expanded kind of thing here okay going to delete the y position and then on the model on the other one i'm going ", "metadata": {"start": 2370.96, "video_id": "XcGVrDmrm3c"}}
{"text": "to add another z position and i'm going to drag it down and negative 10 because it should be downward see that you can see the entire you know workflow from schematic to the pcv up to uh again to the 3d model of how this project would look like so ", "metadata": {"start": 2402.0, "video_id": "XcGVrDmrm3c"}}
{"text": "yeah german i wonder we could also show i mean this is like great to show how mechanical engineers kind of get involved in the process maybe we show commenting what that looks like real quick and then wrap um yeah sure sure so do you want to visit this project here yeah i could uh look you up by your account or you can share the link okay sure sure yeah i could actually just copy this one here ", "metadata": {"start": 2433.04, "video_id": "XcGVrDmrm3c"}}
{"text": "post it post it on the chat okay we might get like 40 people in there all right okay just i will go in there okay hopefully oh my gosh people are popping up already alien pidgey chad nice adrian is here okay uh okay let me just uh ", "metadata": {"start": 2464.88, "video_id": "XcGVrDmrm3c"}}
{"text": "glance are you okay i'm you're not still here couldn't see your abater but yeah let me let me uh insert the comment okay i'm going to call you here okay i guess you're okay and then yeah maybe reply to my comments so yeah maybe if adrian is an i don't know a mechanical engineer he could actually drop comments here hey gerwin your uh ", "metadata": {"start": 2495.119, "video_id": "XcGVrDmrm3c"}}
{"text": "you know your metal casing is very sharp ages maybe we you could put some jumpers on it something like that something like yeah those are kind of yeah in reality like you know happened so i just i just added a response there okay nice job okay going to like yeah so yeah i guess that covers everything about this demo uh yeah ", "metadata": {"start": 2525.52, "video_id": "XcGVrDmrm3c"}}
{"text": "feel free also yeah thank you so much this is great um yeah i mean like you know for like lance mentioned right so i think you know our vision here is like right for flux to become a space where like you cannot just like you know design your schematic you know and do your procurement figure out the pricing of parts in the budgeting do the pcb layering of course but also really place where you can come together you know with your industrial designer with your project managers you know with your suppliers iot manufacturers uh and really work out the details of ", "metadata": {"start": 2557.839, "video_id": "XcGVrDmrm3c"}}
{"text": "your projects and make that really easy and so you know this here today was hopefully like a a fun first like taste of where that's headed um yeah see jarwin's showing the part availability and pricing there so we actually have apis with mauser digikey lcsc they give you at different quantities what's the price what's all the price breaks are they ready to ship that kind of stuff so we get all that in real time ", "metadata": {"start": 2589.28, "video_id": "XcGVrDmrm3c"}}
{"text": "pretty cool um but yeah let's open up go ahead oh someone's gonna say it's like a common pitfall right you finish your design and the component use isn't available and it's one of these things like yeah if like you know 100 components one of them isn't available but you can't build the board now yeah yep you got it um so we can either take questions comments thoughts um really anything from the chat or you can put yourself off mute and ", "metadata": {"start": 2619.44, "video_id": "XcGVrDmrm3c"}}
{"text": "ask a question and then maybe jar and you can pull up some other fun examples to show while we chat yep yep cool i see there mike you got some thoughts about using sub layouts sounds like you've done some experimentation in kai-cad i'm curious what did you think of what we just demoed does it make sense yeah i mean it's kind of exactly the same vibe that i'm going for but ", "metadata": {"start": 2650.72, "video_id": "XcGVrDmrm3c"}}
{"text": "probably built into the tool which is uh you know what what doesn't exist with any of the other tools right now which is it's exciting it's cool were you using a different tool to create subplants with kicad or what was your workflow there i mean yeah kai-cad doesn't really have i mean i've called them like modules i guess my terminology it doesn't really have it properly built in and so i just have a whole bunch of code um because i also have like a bunch of other scripts that i use for everything and so i just ", "metadata": {"start": 2682.319, "video_id": "XcGVrDmrm3c"}}
{"text": "have methods of kind of like updating it from an original pcb file in another sort of like repo it's it's not ideal it's very uh kind of like getter but it works gotcha yeah we also used to call them modules internally you know when it was just on the schematics that i called the modules and then for the pcb side we decided well maybe sub layout is more descriptive of what it is you know um but also for feedback here you know what people ", "metadata": {"start": 2712.72, "video_id": "XcGVrDmrm3c"}}
{"text": "think makes more sense you know a better way to think about it i i think i think you're right sub layout just um describes i guess a little bit more specifically which is always good yeah yeah i wonder if jaron if you want to show how that's made like the sub layout has i guess you already showed the internal schematic diagram but there are pretty quick ways you know if you have a schematic that you created of like a voltage regulator or something like that ", "metadata": {"start": 2744.96, "video_id": "XcGVrDmrm3c"}}
{"text": "you can basically select all of those parts and combine them into a part and that's how you create your uh sub layout or module whatever you want to call the terminology and maybe on that note right for those who are new here you know we have like a github like you know repository built into flux um that can be both public or private so you know there's a lot of like a public not just part but also some layouts now modules whatever you want to call them available ", "metadata": {"start": 2775.599, "video_id": "XcGVrDmrm3c"}}
{"text": "uh and you know you can go in for these public ones and you can just fork them you know uh and either use them to solve or make notifications or improvements you know it makes it easier to collaborate with others on these um not just on the parts themselves and the footprints but also the sub layouts but you know we you know you can do the same thing for your team you know if you have an internal repository for your organization for your team you work on you can have that too you know again it's very similar to what github uh makes available with internal organizations um ", "metadata": {"start": 2806.24, "video_id": "XcGVrDmrm3c"}}
{"text": "and so you know from you know our research and talking to users what's exciting about that is it also makes it easier but to spread out workload across a larger team where you can say hey look you guys are in charge of these three sub uh layouts and we use them across these different products here internally um and to modularize a little bit and you know and have like a a more parallelizable workflow and eventually i don't think we haven't set up for these uh sub layouts but you know you'd be able to simulate all this as well in real time ", "metadata": {"start": 2837.119, "video_id": "XcGVrDmrm3c"}}
{"text": "and those internal schematic diagrams um power the behavior of that module at the project level like what you're seeing right now yeah i was going to mention that earlier i didn't want to interrupt driving but yeah exactly right so that's what we haven't demoed here today but this is all simulatable and these sub layouts can have their own uh a simulated behavior um also then making it easier to figure out hey look you know they divide us all up correctly it's just working as it should you know on all these cool things ", "metadata": {"start": 2867.28, "video_id": "XcGVrDmrm3c"}}
{"text": "any other thoughts comments concerns i was just going to mention as well i think the whole idea of having just comments as simple as it is it's a feature that um i was looking into a few of the other kind of like online uh just i i think their main selling point is like visual git diffing of ecad projects but one of the main reasons that i ", "metadata": {"start": 2898.16, "video_id": "XcGVrDmrm3c"}}
{"text": "wanted to try them out was literally just so that i could send it over to mech engineers id guys and everything and just have them be able to make comments on you know release files and like particular versions of uh products i i think that's just incredibly useful even though it's it's like i guess a small feature of what you guys think yeah exactly we had a lot of people you know most of the collaboration i think ", "metadata": {"start": 2930.4, "video_id": "XcGVrDmrm3c"}}
{"text": "happens with that pcb layout processing like you said the industrial designer mechanical engineer the electrical engineer all of them got to be working together and i've definitely seen some um other platforms that are online where you can kind of upload your design and do uh versioning and commenting and stuff there but i just think it makes more sense in the tool you know i don't want to leave a tool to some other site to collaborate like no i want to do the iteration and ", "metadata": {"start": 2962.0, "video_id": "XcGVrDmrm3c"}}
{"text": "have the conversation in the design tool you know i think that's the paradigm shift that i'm trying to create with that in mind though um i'm interested if you guys or like to what extent you guys are interested in interoperability with other ecad systems so for example like if i still wanted to use you know keycad as as my daily driver for things but i wanted to be able to use a bunch of the other features that you guys have that i'm never going to be able to easily integrate into that how ", "metadata": {"start": 2992.24, "video_id": "XcGVrDmrm3c"}}
{"text": "easy is it to like pull something in and out of a different software like that yeah that's a great question um i mean you know we have partial support today for kycat uh keycard um you know you can import keycard uh parts and like footprints and symbols all that kind of stuff you can we can export um to kick at the schematic and the the part library we're working on the um on the pcb uh layout export to kaika to you know also have like a support for ", "metadata": {"start": 3023.599, "video_id": "XcGVrDmrm3c"}}
{"text": "altium in the pipeline you know so the idea is you really like to make it as seamless as possible to get your data in and out um and to support your your workflows here um you notice of course with the caveat that a little bit you know you you're like bound to the lowest common denominator there uh and that you know when you export to let's say keycard you know the whole thing with the sub layouts you know breaks apart a little bit you know because we would have to flatten that all into one uh layout and that kind of stuff um yeah ", "metadata": {"start": 3054.4, "video_id": "XcGVrDmrm3c"}}
{"text": "yeah cool i mean i i guess for me personally at least there's a whole bunch of features in flux that i really want to start using uh so to be great if i mean even though maybe this is just like frustrating for you because like you've obviously put a bunch of work into the layout stuff that's your main focus right now but if i can just import files and use them similar to what some of the other um like get versioning systems and things like that can use them as so that i can at least use a subset of all the the cool ", "metadata": {"start": 3085.839, "video_id": "XcGVrDmrm3c"}}
{"text": "features you guys are putting in that would allow me to start using the system a lot earlier than otherwise so obviously like the holy grail and yeah i totally agree uh with you guys and saying that like having everything in the one editor is awesome but obviously you're gonna build up to that so having something i can integrate it in with other stuff in the meantime what would be cool i don't know if that's you know plausible to fit into your yeah your workflow of how you're putting things together but it would be cool yeah i know i mean fully agree right um there's like an adoption curve there you ", "metadata": {"start": 3117.839, "video_id": "XcGVrDmrm3c"}}
{"text": "know that we see with everybody but i mean even ourselves with our own projects you know um and so it's always interesting to hear about you know workflows and whatever we can enable there you know what part you care about doing in flux this is what k part you care about doing in keycard in your case right um and in what features you care about uh being able to in uh import and export right because you know then we can like you know it's much easier for us to build like something specific then just like support you know just the whole entry data ", "metadata": {"start": 3149.599, "video_id": "XcGVrDmrm3c"}}
{"text": "um yeah yeah the way we approach that is you know working with the private beta customers you know through our slack and email conversations all that kind of stuff so we have the numbers we know what people want integrations with uh as a starting place but maybe that's a good time to to uh say you know if you want to kick the tires on this let us know and the best way to you know participate in this whole ", "metadata": {"start": 3180.16, "video_id": "XcGVrDmrm3c"}}
{"text": "design process is to join our slack which i can put a link to there and we'll continue you know we've got the three minutes left so let's just say we're going to continue to have these sessions called town halls where we're going to dog food new features give you the opportunity to give feedback that kind of stuff so i'll i'll post a link i don't know if matthias you have any closing words or anything no i mean i just want to thank everybody ", "metadata": {"start": 3211.839, "video_id": "XcGVrDmrm3c"}}
{"text": "you know it's been like a long way uh to get here uh just with the team internally at flux but also with the community around here and all the good food pickers provide and like you know in terms here um mike i mean just send us your list of things that are missing today that would allow you to start using flux you know um and then you know we get on it you know i mean we love hearing these these things in these workflows and learning about new workflows and enabling them frankly you know um [Music] yeah cool ", "metadata": {"start": 3241.92, "video_id": "XcGVrDmrm3c"}}
{"text": "um any other closing comments uh jarwin yes otherwise a logistical thing so you know the demo you just saw the pcb editor we're going to open up access everybody has an account um by end of the day so then you guys can stop playing around i think we're going to send out an email with some links and examples um it is a tutorial either in the making or almost uh already [Music] no oh it's um perfect yeah i love it it ", "metadata": {"start": 3273.359, "video_id": "XcGVrDmrm3c"}}
{"text": "was it wasn't you know that's how it worked it wasn't done this morning it's done now i wouldn't believe how many things we showed you today weren't done two hours ago um so but this is how this goes with deadlines uh but yeah look i'm very excited here it's very early shoot us all your feedback and you know we're very excited here to after the the holiday break to come back here and then you know drive this home so that you guys can start using this for production uh projects um yeah well well thank you so much uh happy ", "metadata": {"start": 3305.119, "video_id": "XcGVrDmrm3c"}}
{"text": "holidays everyone and i'll see you at the next town hall yeah have a good one everyone see ya hi everyone you ", "metadata": {"start": 3335.44, "video_id": "XcGVrDmrm3c"}}
{"text":"Flux is a cloud-based tool to create electrical circuit designs in your browser. Flux offers: Flux is for electrical engineers, electronic designers, and anyone designing and building electronics. Flux is used by hobbyists and professional engineers in large companies.","metadata":{"article_id":"https://docs.flux.ai/getting-started/getting-started-with-flux","header":"what-is-flux?"}}
{"text":"Flux is currently in Beta and we are accepting users with a background in electronics design. You can sign up for Beta access from our main page. Flux is currently free to use while in Beta. You can also join our Slack channel with other engineers, designers, and hardware enthusiasts to get help using Flux or just to talk whatever you're working on.","metadata":{"article_id":"https://docs.flux.ai/getting-started/getting-started-with-flux","header":"can-i-use-flux-now?"}}
{"text":"As Flux is in Beta, we're still ironing out a variety of bugs in the product while also aggressively building a lot more functionality. You can help shape the direction of Flux by giving us feedback during the Beta process. You can either join our Slack channel and provide feedback there or you can also file bugs here on Canny.","metadata":{"article_id":"https://docs.flux.ai/getting-started/getting-started-with-flux","header":"help-build-our-product"}}
{"text":"To create a new document, use the menu drop down on the top left and select “new project”. You can also fork existing projects to get started quickly. Although, we’ll cover that in another tutorial.  Let’s rename this document “my example document” by clicking on the text here.  The canvas is where you build and simulate circuits. Everything you do here is synced in real-time to the cloud. To pan, you can use two fingers on a touch pad or [ pan with a mouse ]. To zoom, you can pinch and pull on a touchpad or use the scroll wheel of your mouse. You can also use the hotkeys + and - to zoom. On the left, we have a part browser which contains over 20,000 parts that are publicly available. Let’s build a circuit with a microcontroller to drive an i2c OLED display. So, I’ll search for ESP8266. This one looks good with 29 uses and 3 stars. To use it, simply drag the part from the browser to the canvas.  On the right panel, this is the inspector. it shows contextual information about part that’s selected and also allows you to change properties of that part, view documentation, and other information.  When nothing is selected or by clicking at an empy portion of the canvas, the inspector shows document level information like the description, assets, and other properties. Now I’m going to search for a DC Supply, OLED screen, GND, and a couple resistors.  To rotate party quickly, use the hotkeys open or close square bracket. [ ]","metadata":{"article_id":"https://docs.flux.ai/getting-started/drawing-your-first-schematic","header":"create-a-new-project"}}
{"text":"To edit the properties of a part like this resistor, simply click the part and change the resistance here. Keep in mind, you can also use math expressions or formula to calculate values in the inputs.","metadata":{"article_id":"https://docs.flux.ai/getting-started/drawing-your-first-schematic","header":"edit-value-of-part-or-using-math-expression-or-formula-to-derive-a-value"}}
{"text":"To connect parts using routes, hover over a part to reveal it’s terminals, then click on the white dots to begin routing mode. To connect a route between parts, click on the terminal of the other part to complete the connection. You can also drag the routes and/or parts to clean up your diagram. While in wiring mode, you can also change the elbow direction of the route by pressing “f” to flip the direction. To cancel the routing mode, just press esc. You can also start your routing by double clicking on the canvas.. To end this route without connecting it to a part again  double click on the canvas.","metadata":{"article_id":"https://docs.flux.ai/getting-started/drawing-your-first-schematic","header":"connect-parts-using-routes"}}
{"text":"If you find yourself using the same parts frequently, you can map them to hot keys. For example, click the part you want to map, and then click “ctrl” and a number 1-5. so you can use 1 up to 5. After you map the part, you’ll be able to use it quickly by pressing the number 1. So every time I press number 1, it will drop a resistor to the canvas and pressing 2 for the ground. You can find some helpful commands by using right click menu. You can see flip, rotate, spacing and you can insert a comment. To view all of the available short cut keys, you can use the drop down on the top right and select “keyboard shortcuts” or just press cmd H on your keyboard. Now here’s my completed project. It just a very basic circuit using ESP8266 to drive an oled display. If you noticed I’ve used the serial connection on the MCU. The reason why I did this was because I don’t have plan to use the serial debugger, so I have more gpios to use. There you go! We’ve covered how to create a new document and how to create your first circuit.","metadata":{"article_id":"https://docs.flux.ai/getting-started/drawing-your-first-schematic","header":"assign-hotkeys-to-parts-you-use-frequently"}}
{"text":"At Flux we think a little differently about parts... we’re big believers of the power of open source.  Flux allows users to publish parts to a community library. So, whenever someone uploads a part, or updates things like documentation, properties, symbols, or simulation code, everyone has the opportunity to benefit. This way, the quality of parts in the community part library are constantly improving.  Don’t worry, you’ll always have full control over accepting changes to parts that are updated by the community.  ","metadata":{"article_id":"https://docs.flux.ai/getting-started/how-parts-work","header":"open-source-philosophy"}}
{"text":"Let’s talk about some tips for using community parts in the part search on the left here. Let’s search for something like the ESP8266.  For each result, you can see the symbol, title, and description. Under that we have the number of uses, or the number of projects that contain that part.  Then, we have the number of people who have starred the part. You can actually star your own parts here in the part search to favorite them. This will add them to your starred library of parts on your profile. Notice that the star is now filled in in the part search to make it easy to find it later.  We can see which parts have simulation models with this icon. This means that they either have simulator code written, or an internal schematic diagram that determines the function of the part in a simulated circuit. ","metadata":{"article_id":"https://docs.flux.ai/getting-started/how-parts-work","header":"using-parts-from-the-community-library"}}
{"text":"After you’ve placed a part on the canvas, you can click on it to view more information and controls in the inspector.  We can give the part a designator here, fine tune its position here.  We can also select the part version here to choose “Head” or “Latest”. In the future, you’ll get updates when a part changes and a dialogue will appear when you load the document that lets you see what changed so you can accept or ignore. Here you can see the creator and the date it was created. The next section is the state panel. This panel shows the metric outputs of a part during simulation. When it’s not running, you won’t see anything. When it is running, you’ll see plots and metrics in real-time. You can learn more about this in the simulation tutorial.  As for controls, this is where you can use things like push buttons or switches in your circuit.  Users can add as many properties as they want, but we have a few defaults. Here, you can edit things like resistance, and find things like manufacturer name, part number, package or case code, and find links to things like data sheets. ","metadata":{"article_id":"https://docs.flux.ai/getting-started/how-parts-work","header":"the-inspector"}}
{"text":"An important principle to understand about Flux is that parts can infinitely nest. You can think of parts kind of like subroutines from the software world. Each part can have an internal schematic diagram, code, and other attributes. Let’s take a look at this low noise amplifier as an example. To open the part, right click and hit open part.  In a new tab, we can see the part is open. See here we have the name “Low noise amplifier” in the top left as well as all the inspector information we had in our project when we clicked on the part.  Notice here is that the 3 pins, Signal in, GND, and RF out + DC, correlate to the pins on the part from our project here.  You can imagine how you can infinitely nest parts within parts and how powerful that can be, right?  So, the low noise amplifier is driven by the function of the internal schematic diagram when used in a simulation.  A part can also be driven by a simulation model written in typescript like this resistor. ","metadata":{"article_id":"https://docs.flux.ai/getting-started/how-parts-work","header":"inside-parts-&-nesting"}}
{"text":"For most of the parts on the community library, you’re probably going to have view-only access. That means that you can edit things like physical properties, designator, and controls, but if you want to edit more fundamental things like the symbol, manufacturer part number, then you might consider forking a part.  To fork a part, open the part and simply click “fork” button at the top right. Forking retains the history from the original author while allowing you to do whatever you wish with the new part. So, you can add more information, edit infinite properties, to make it your own.  In other tutorials we’ll talk more about best practices for part creation, including importing parts and building parts from scratch. ","metadata":{"article_id":"https://docs.flux.ai/getting-started/how-parts-work","header":"forking-parts"}}
{"text":"When you’re ready to purchase your parts, you can export a BOM .csv and upload it to your favorite place to purchase parts. In the future, we plan on showing you pricing, availability, and allowing you to purchase from within Flux. ","metadata":{"article_id":"https://docs.flux.ai/getting-started/how-parts-work","header":"exporting-a-bom"}}
{"text":"On the off-chance that you don’t see a part you need in the Flux community library, we make it easy to create and upload your own parts. importing is the fastest and easiest way to create a new part in Flux. Right now, we accept KiCAD .lib files but we plan on supporting more file formats in the future.  First, select the hamburger drop down up here from either the editor or from your profile page, select “import” and then “KiCAD” part from the drop down. Then you have to find the .lib file and click import. You can actually import more than one part at a time while you’re on this modal.  From here, you can select the part you want to import, then a browser tab will open up as soon as the part selected is imported, showing the part’s internal schematic diagram, which is essentially a few terminals for this part.  As you can see, this is the internal schematic for this part. Yep It is essecially composed of only of 5 terminals to represent the 5 pins of this part. Remember that terminal is the main building blocks of parts in Flux. After importing a part, you can right away update the description, as well as if you want to add more properties like datasheet, package case code and so on.","metadata":{"article_id":"https://docs.flux.ai/getting-started/creating-and-importing-parts","header":"importing-kicad"}}
{"text":"You might already know by now that we are big believers of the power of open source. If you find a part created by someone that needs to be improved maybe it needs a simulation model or maybe it has wrong pin label, you can easily fork your own copy so can modify that part. For example, if I want to modify this part acpl-w343-000e created by a user named adrian95. Click on the part hyperlink from the part browser, then at the top - click on this FORK button. Again, this will open a browser tab with your own copy of this part already loaded. You could now update, modify or write a simulation model for this part.","metadata":{"article_id":"https://docs.flux.ai/getting-started/creating-and-importing-parts","header":"forking-and-modifying-parts"}}
{"text":"As I mentioned, terminal is the main building block for a part. If you want to create a 6 pin IC, simply create a new blank document, then drag and drop 6 terminals into the canvas. This will represent the pins of your part. Make sure that you name your document as a name of your part. I am going to name this as Video Signal Analog Switch for now. To finally set this as a part, simply activate this switch button to publish it as a part on the part community library. Now let’s use that Signal Analog Switch that we just created a while ago in this Diversity Controller Project that I am built in Flux. First, let’s us search for that part in the part community library. Then drag and drop that part into the canvas. Let’s zoomed in a little bit. Now. let’s say you want to update the pin labels of this part. To do that, let’s go to the main document of the part first, and select the terminal that you want to update its label. Let’s say I want this P1 to be VCC, and P6 to be GND. Then without pressing anything, the document already sync to the server - so if go back to the diversity controller, to where an instance of the part is being used, we can now see that the pin labels have also updated. Flux works in the cloud. Everything is always synced. Just like google docs, you don’t need to press any save button.","metadata":{"article_id":"https://docs.flux.ai/getting-started/creating-and-importing-parts","header":"creating-parts-from-scratch"}}
{"text":"We all know that Most of the time parts are not always rectangular, parts have their own  symbol for their representation. So for a resistor, it should look like this, and the ground is should like this. That’s there standard symbol.  So in order for us to update the default symbol for this part that we created, we need to upload and use a custom symbol. Let’s go to the main document of this Signal Analog Switch, and then on the inspestor, we go to the assets panel, and click add.  Flux supports different format for symbol, but in our case, I’ll recommend let’s use svg format.  We need to map the x and y values of each of the terminal in reference to its symbol. To do that, click on the terminal and in the inspector, Symbol Pin Position property in the properties panel. We need to play with the value to pin point the exact location to where you want the pin to be map. That's it guys, we have covered I hope your learn something on this tutorial. Thank you!","metadata":{"article_id":"https://docs.flux.ai/getting-started/creating-and-importing-parts","header":"creating-parts-(custom-symbols)"}}
{"text":"Flux is like a shared virtual space, where you collaborate with others when building hardware. You might want to get feedback or help from other electrical engineers, mechanical engineers, firmware developers, or even manufactures without having to worry about anyone messing up your work.  There are a couple of ways to share your project with others. The first way is to simply copy and paste the url in the browser. Flux updates in real-time to the cloud similar to Google documents, so whoever has the link will always see the latest and greatest. (No need to email PDFs anymore).  The second way to share is with the share button here on the top right. Click the button to bring up a dialogue to control sharing and permissions. As you can see, we can give edit, view only, or commenting permissions. This will set the default permissions at a high level for anyone who accesses the document.  If you want to control individual permissions you can click “advanced” and control permissions at an individual level. This is helpful if you want to give someone on your team editing permission, and want to give someone outside your team view only or commenting permission. ","metadata":{"article_id":"https://docs.flux.ai/getting-started/collaboration-in-flux","header":"sharing-and-permissions"}}
{"text":"Speaking of commenting, communication is the key to great collaboration, and we built Flux with that in mind. To create a comment on a document, right click and select “create comment”. You can also use the hotkey “cmd G”. Then, write your comment and hit the send button, or just click enter. Sometimes when designing hardware, a picture can speak a thousand words, so we made it easy to add photos and video to your comments. So, you can have the conversation in the context that it matters on the schematic.  A note on notifications, when someone writes a comment on your document that you’re collaborating on, all the contributors of that document will receive an email so you can be sure that they’re staying in the loop. ","metadata":{"article_id":"https://docs.flux.ai/getting-started/collaboration-in-flux","header":"commenting-&-notifications"}}
{"text":"Mistakes happen. Fortunately, in Flux, no change is destructive. This means that if you or a collaborator break something in your document, then you can always revert changes using the infinite undo/redo commands or the change history.  To view the change history, click the hamburger menu up here and select “change history” from the drop down. On this screen you can see every single action anyone has made in the document. Just click on an entry to view the document in its previous state.  If you want to restore the document to a previous state, click on an entry, and then click “restore document”. This will return the document to its previous state as a new action. Meaning, that the changes that you made after that restore state are still saved in the change history.  This level of control should give you peace of mind when sharing editing permissions with others. ","metadata":{"article_id":"https://docs.flux.ai/getting-started/collaboration-in-flux","header":"change-history"}}
{"text":"Something special about Flux is that it’s real-time multiplayer. This means that when you share a link with others and they view the document at the same time, you can actually see their cursor position and edits in real-time.  This can be a really helpful tool for conference calls when reviewing changes, debugging circuits, and working faster with other engineers.  There you go! We’ve covered ","metadata":{"article_id":"https://docs.flux.ai/getting-started/collaboration-in-flux","header":"real-time-multiplayer"}}
{"text":"**\n**","metadata":{"article_id":"https://docs.flux.ai/getting-started/how-to-simulate-your-circuit","header":"in-this-tutorial-we’re-going-to-cover:"}}
{"text":"Flux has one of the worlds first programmable simulators. That means that you can actually write and publish your own simulation models to the community library. So, instead of having to hunt down models from various manufacturers and sources, you can stand on the shoulders of others. All models are on the same platform and compatible with the same simulator.  When creating a simulated circuit, just make sure that you’re using parts that have models. You can tell if a part has a model by the icon <> Model. The function of the part is determined either by a code model, or by its internal circuit.  Let’s open a resistor and take a look at its model by clicking on the Code tab. You can see it’s written in Typescript and is fairly easy to understand if you’re familiar with programming. We have also a ton of documentation if you’re interested in writing your own models, or modify an existing models by forking a part.  The other way a part can function is through its internal schematic diagram.","metadata":{"article_id":"https://docs.flux.ai/getting-started/how-to-simulate-your-circuit","header":"how-the-simulator-works"}}
{"text":"Let’s open one of my circuits here, the AC to DC converter to see the simulator in action.  As you might notice, the moment i opened this document - the simulator has started right away this is because the simulator in Flux is always active. To display the output of a part on the canvas, simply click on the part, and on the inspector look for State panel. From there, you can see that we have couple of outputs that we can enable or disable. If you want to display the output, simply click on the eye icon. Same way if you dont want to see the output, click again on the eye icon to disable it. You can also move the simulator output display somewhere else on your canvas, just drag the designator block. You can put two outputs side by side for ease of comparing their output. To adjust the simulation speed of your circuit, go to the inspector and look for the simulation panel. You can see that I could adjust the time per step size as well as its unit. For now, I am just using the 500uS step size. Now, Let’s take a deeper look at how to write or create a simulation model for an operational amplifier or commonly known as opamp. I created a very simple amplifier circuit here. Right click on the opamp then from the menu choose \"open\". We need to open the main document of the opamp that is being used as instance on that amplifier circuit. Click on the \"code\" tab - so you will see its simulation model. That's how simple the simulation model in Flux.","metadata":{"article_id":"https://docs.flux.ai/getting-started/how-to-simulate-your-circuit","header":"simulated-circuit-example"}}
{"text":"What if we were re-think the PCB design process from scratch? We got together with many of our private beta customers and asked them what they thought could be improved with PCB design. These are some of the principles that we came up with: With these principles in mind, we’ve been hard at work building an alpha of the PCB editor that we’re excited to share! Being an alpha means that it’s not feature complete, there are known bugs and performance issues, but it’s enough to start getting your thoughts and feedback. Please feel free to post your thoughts on our feedback portal or join our Slack to join the discussion!","metadata":{"article_id":"https://docs.flux.ai/getting-started/PCB-tutorial-with-sub-layouts","header":"vision-for-pcb-design"}}
{"text":"We’re going to create a smart haptic buzzer powered by a STM32F03. We’ll use sub-layouts to make this process faster so that we can utilize layout work that we’ve already completed. First, we’ll build a schematic of the project and connect each of the sub-layouts. Create a new document by clicking “New Project” from the dropdown on the top left of the navigation bar. Next, we’ll search for “USB-C Receptacle with built-in ESD Protection and 3V3 LDO Smart Module” in the parts browser and drag it onto the canvas. This is the first sub-layout we’ll be using.","metadata":{"article_id":"https://docs.flux.ai/getting-started/PCB-tutorial-with-sub-layouts","header":"pcb-editor-tutorial-begins"}}
{"text":"What’s a sub-layout? Have you ever created something like a voltage regulator circuit and found yourself re-creating it again and again each time you create a new project? Well, with Flux you can create a sub-layout. You can learn more about creating parts with internal schematic diagrams here. We’ll go into how to create a sub-layouts in future tutorials. To check out the internal schematic diagram from this sub-layout we can right click on the part and click “open part”. On the new tab, we can see all the parts that make up the sub-layout in the diagram. To look at the PCB sub-layout for this, you can click the “PCB” view in the top navigation bar. This will show the sub-layout in 2D view. Similar to a subroutine in software, we can use this sub-layout again and again in other projects, and it will always be laid out in the same way. And, because Flux is open-source, you have the option of publishing your sub-assembly to the community. That means that you also have access to community generated sub-assemblies. So, if someone’s already created a sub-layout you always use it or fork it and make your own customizations. Cool! Go back to your project tab with your sub-layout placed, search for the rest of the sub-layouts that we’ll use for this PCB, and add them to your schematic. Then, wire each sub-layout as shown to create the finished schematic diagram. Feel free to use the completed project as a reference when wiring the sub-layouts.","metadata":{"article_id":"https://docs.flux.ai/getting-started/PCB-tutorial-with-sub-layouts","header":"sub-layouts"}}
{"text":"Click the “PCB” view in the top nav on your project to laying out our PCB. You’ll see that the sub-layouts and the buzzer are placed and the board, also called the “Layout”, is a bit too big. First, we’ll resize the Layout to something a bit manageable. To do this, we’ll use rules by clicking on Layout in the object tree on the left, or by simply clicking the “Layout” text on the canvas to select the layout. With the Layout selected, find the “Layout rules” on the right in the inspector associated with the selected element. Under “Object-specific rules” we’ll click “add”. In the popup we’ll search for “size” and then click done. That adds a size rule to our Layout.  In the size rule that you just created, we’ll enter “18 66”. The first entry is the width and the second number is the height. Default units are in mm, and make sure you put a space between the numbers.  Now, the Layout shape should resemble a stick of gum. Note: You can add a “Layout Color” rule to your Layout to change the solder mask color for your PCB. ","metadata":{"article_id":"https://docs.flux.ai/getting-started/PCB-tutorial-with-sub-layouts","header":"creating-the-pcb"}}
{"text":"Now, we want to position the sub-layouts on the board by adding a position rule to each of the sub-layouts. Normally, you can drag components, but we know exactly where we want each sub-layout to be. So, find the sub-layout in the object tree on the left under components and click “BZ1” to select the buzzer.  Then, in the inspector under “layout rules”, add a rule called “position” and add the following position rules for each of the sub-layouts accordingly:","metadata":{"article_id":"https://docs.flux.ai/getting-started/PCB-tutorial-with-sub-layouts","header":"positioning-sub-layouts-on-the-board"}}
{"text":"Now, we’ll route the sub-layouts together. To make it easier to see while we work, we can use the layer view controller on the bottom left of the screen. Click the Layer button on the left to pull up the menu and then click the eye icon to the right of each layer to turn them off and make it easier to see the Top Copper layer for routing.  On the Metadata layer, you can turn on and off “airwires” which are similar to “ratsnest” that show you connections using data from the schematic diagram. To start routing, look for an air-wire connecting two pins and hover over one of the pins. Just like in the schematic editor, click the pin to start routing. As you’re routing, you’ll notice that the airwire follows your cursor to guide you to the correct pin. You can click on the canvas to create an elbow. Finish routing the board by making sure that there aren’t any airwires left. Right now, we don’t have a design rules checker that will catch unconnected airwires. This feature is coming soon.  After you’re done with routing, you can check out how the board looks in 3D by clicking the 3D button at the bottom right of the canvas. Virtual design reviews & commenting In 2D view, you can actually add comments by right clicking and clicking \"add comment\". This makes it mach easier for others on your team like mechanical engineers to join the conversation. Remember you can always control permissions by clicking the \"Share\" button in the top right. Flux works similar to a Google Doc, so you can share your PCB design by simply sharing a url.  Another great way to use Flux is to communicate with your vendors and manufactures while conducting design reviews. We're excited to see what you do with it! Please feel free to post your thoughts on our feedback portal or join our Slack to join the discussion!","metadata":{"article_id":"https://docs.flux.ai/getting-started/PCB-tutorial-with-sub-layouts","header":"routing-the-sub-layouts-together"}}
{"text":"Selects all objects that have the specified object type. Syntax: objectname Example: pad will match any pad object.","metadata":{"article_id":"https://docs.flux.ai/getting-started/pcb-layout-rule-selectors","header":"type-selector"}}
{"text":"Selects an object based on the value of its designator. There should be only one object with a given designator in a project. Syntax: #idname Example: #R2 will match the object that has the designator \"R2\".","metadata":{"article_id":"https://docs.flux.ai/getting-started/pcb-layout-rule-selectors","header":"designator-selector"}}
{"text":"Selects all objects that have the specified property. Syntax:  [prop] Represents objects with an property name of prop. [prop=value] Represents objects with an property name of prop whose value is exactly value. [prop~=value] Represents objects with an property name of prop whose value is a whitespace-separated list of words, one of which is exactly value. [prop|=value] Represents objects with an property name of prop whose value can be exactly value or can begin with value immediately followed by a hyphen, - (U+002D). It is often used for language subcode matches. [prop^=value] Represents objects with an property name of prop whose value is prefixed (preceded) by value. [prop$=value] Represents elements with an property name of prop whose value is suffixed (followed) by value. [prop*=value] Represents objects with an property name of prop whose value contains at least one occurrence of value within the string. [prop operator value i] Adding an i (or I) before the closing bracket causes the value to be compared case-insensitively (for characters within the ASCII range). [prop operator value s] Adding an s (or S) before the closing bracket causes the value to be compared case-sensitively (for characters within the ASCII range). Examples:  [\"Manufacturer Name\"] will match all objects that have the Manufacturer Name property set (to any value). [\"Manufacturer Name\"=\"Texas Instruments\"] will match all objects that have the Manufacturer Name property set to \"Texas Instruments\". [\"Manufacturer Name\"*=\"Texas\"] will match all objects where the Manufacturer Name property contains \"Texas\". [\"Manufacturer Name\"$=\"Instruments\"] will match all objects where the Manufacturer Name property ends with \"Instruments\". [\"Forward Voltage\"=] will match all objects that have the Manufacturer Name property set (to any value).","metadata":{"article_id":"https://docs.flux.ai/getting-started/pcb-layout-rule-selectors","header":"property-selector"}}
{"text":"The , selector is a grouping method that selects all the matching objects. Syntax: A, B Example: pad, via will match both pad and via objects.","metadata":{"article_id":"https://docs.flux.ai/getting-started/pcb-layout-rule-selectors","header":"selector-list"}}
{"text":"The \" \" (space) combinator selects objects that are descendants of the first object. Syntax: A B Example: #R1 pad will match all pad objects that are inside the object with the designator R1.","metadata":{"article_id":"https://docs.flux.ai/getting-started/pcb-layout-rule-selectors","header":"descendant-combinator"}}
{"text":"The > combinator selects objects that are direct children of the first object. Syntax: A > B Example:  #U1 > text will match all text objects that are nested directly inside the object with the designator U1.","metadata":{"article_id":"https://docs.flux.ai/getting-started/pcb-layout-rule-selectors","header":"child-combinator"}}
